{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","console","log","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a91c1ce1.chunk.js","sourcesContent":["import React from 'react';\n\n// can also do de-structuring within the component parameters\nconst Card = ({id, name, email}) => {\n\n// const { id, name, email } = props;\n\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name} \n              email={robots[i].email} \n              />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div>\n      <input\n      type='search'\n      placeholder='search robots'\n      className='pa3 ba b--green bg-lighttest-blue'\n      onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oh no, some error occurred!</h1>\n    } else {\n      return this.props.children\n    }\n  }\n  \n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react'\n\n/* \n  can also use PureComponent, but only does shallow dtate change check so may not always be accurate\n*/\n\nclass Header extends Component {\n\n  // avoid unnecessary re-render\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    console.log('header component');\n    return <h1 className='f1'>Robofriends</h1>\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    \n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ?\n      <h1>Loading</h1> :\n    (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = text => (dispatch) => {\n  dispatch({ type: CHANGE_SEARCH_FIELD, payload: text })\n};\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload }\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store =\n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}